cmdhistory=["(prime 1)" "(prime 3)" "(prime 97)" "(prime' 97)" "(prime2 97)" "(prime? 97)" "*ns*" "(prime? 97)" "(take 5 (filter prime? (range 2)))" "(take 5 (range 2))" "(take 5 (filter prime? (range)))" "(* 7 5)" "(take 5 (filter (comp prime?) (range)))" "(take 5 (filter prime?\\n                (range)))" "(prime? 2)" "(prime? 29)" "(prime? 35)" "(/ 35 7)" "(in-ns 'eulerclj.utils)" "(prime? 35)" "(count [1 2 3])" "(count [1 2 3 4 5 6 7])" "(count [1 2 3 4 5 6 7 'a'])" "(prime? 35)" "(> 35 (* 5 5))" "(* 5 5)" "(prime2? 35)" "*ns*" "(in-ns 'eulerclj.utils)" "(prime2? 35)" "*ns*" "(take 5 gen-primes)" "(take 3 (drop 2 range))" "(take 3 (drop 2 (range)))" "(take 5 (filter prime? (drop 2 (range))))" "(take 5 (gen-primes))" "(take 100 (gen-primes))" "(prime? 523)" "(first [1 2 3 4])" "(rest [1 2 3 4])" "(sqrt 100)" "(in-ns 'eulerclj.utils)" "(let [foo 600851475143]\\n  (filter \#(and (< % (sqrt foo)) (zero? (mod foo %)))) gen-primes)" "(let [foo 600851475143]\\n  (filter \#(and (< % (eulerclj.utils/sqrt foo)) (zero? (mod foo %)))) gen-primes)" "(let [foo 600851475143]\\n  (filter \#(and (< % (sqrt foo)) (zero? (mod foo %)))) gen-primes)" "*ns*" "(in-ns 'eulerclj.core)" "(let [foo 600851475143]\\n  (filter \#(and (< % (sqrt foo)) (zero? (mod foo %)))) gen-primes)" "(let [foo 600851475143]\\n  (filter \#(and (< % (sqrt foo)) (zero? (mod foo %))) gen-primes))" "(let [foo 600851475143]\\n  (filter \#(and (< % (sqrt foo)) (zero? (mod foo %))) (gen-primes)))" "(+ 2 2)" "(let [foo 600851475143]\\n  (range 2 (sqrt foo)))" "(sqrt 999)" "(range 1 (sqrt 999))" "(let [foo 600851475143] (filter \#(and (prime? %) (zero? (mod foo %))) (range 2 (sqrt foo))))" "(prime-divisors 600851475143)" "(max (prime-divisors 600851475143))" "(max [1 5 2])" "(apply \\n  max [1 5 2])" "(last [1 5 2])" "(main)" "(-main)" "(e1)" "(sum [1 2 3])" "(e1)" "(e1_)" "(e1)" "(e1_)" "(e3)" "*ns*" "(take 5 (fib))" "*ns*" "(take 3 (eulerclj.utils/fib))" "(in-ns 'eulerclj.utils)" "(take 3 (fib))" "(take 3 (fib 0))" "(take 3 (fib 3\\n             ))" "(take 5 (fib 3))" "(take 2\\n      (fib 3))" "(take 5 (fib 3))" "(take 5 (fib 0))" "(take 10 (fib 3))" "(take 100 (fib 3))" "(take 50 (fib 3))" "(take 10 (fib 3))" "(fib 3)" "(fib 5)" "(fib 2)" "(fib 0)" "(fib 1)" "(fib 2)" "(apply fib (range 10))" "(map fib (range 10))" "(map fib (range 20))" "(map fib (range 50))" "(map fib (range 30))" "(map fib (range 35))" "(defn foo [[x y]]\\n  (+ x y))" "(foo [1 2 3 4])" "(foo [3 4 5 6])" "(for [n (range)] (fib n) \:where n < 4000000)" "(for [n (map fib (range) \:while n < 4000000)])" "(take-while \#(< % 4000000) (map fib (range)))" "(take-while \#(< % 400) (map fib (range)))" "(take-while \#(< % 1000) (map fib (range)))" "(take-while \#(< % 400000) (map fib (range)))" "(take-while \#(< % 500000) (map fib (range)))" "(def mfib (memoize fib))" "(take-while \#(< % 500000) (map mfib (range)))" "(take-while \#(< % 4000000) (map mfib (range)))" "(take-while \#(< % 400000) (map mfib (range)))" "(take-while \#(< % 1000000) (map mfib (range)))" "(take-while \#(< % 2000000) (map mfib (range)))" "(fibfast)" "(fibfast 1000000)" "(fibfast 2000000)" "(fibfast 4000000)" "(apply + (fibfast 4000000))" "(apply + (filter even? (fibfast 4000000)))"]
eclipse.preferences.version=1
